<?php
namespace OneAuth\Controller;

use OneAuth\Request\AuthorizeParams;
use OneAuth\ResponseType\AuthorizationCode;
use OneAuth\Server;
use Psr\Http\Message\ResponseInterface as ResponseInterface;
use Psr\Http\Message\ServerRequestInterface as RequestInterface;

class AuthorizeController extends AbstractController
{
    const validationMessages = [
        'not_authorized' => 'Client did not authrorize the request',
        'invalid_response_type' => 'Invalid response type',
    ];

    /**
     * Validate request for obtaining authorization code.
     * Returns response with error message if validation fails, otherise returns 200 OK.
     *
     * The request query should have these params:
     *  - response_type:          must be 'code'
     *  - client_id:              must match one of registered client IDs
     *  - redirect_url:           must match one of registered redirect URLs
     *  - scope:                  must be subset of registered scopes
     *  - state:                  any value (recommended to prevent CSRF attacks)
     *  - code_challenge:         SHA_256 hash of the random code verifier (43-128 chars) generated by the SPA (recommended for PKCE)
     *  - code_challenge_method:  must be 'S256' (recommended for PKCE)
     *
     * @param RequestInterface $request
     */
    public function validateRequest(RequestInterface $request, ResponseInterface $response): ResponseInterface
    {
        $params = new AuthorizeParams($this->dataStore, $request);
        $redirectUrl = $params->get('redirect_url');
        $validationErrors = $params->getValidationErrors();

        if (!empty($validationErrors)) {
            if ($redirectUrl !== null) {
                return $this->getRedirectResponseWithError($response, $redirectUrl, implode(', ', $validationErrors));
            } else {
                return $response->withStatus(400, implode(', ', $validationErrors));
            }
        }

        return $response->withStatus(200, 'OK');
    }

    public function handleAuthorizeRequest(RequestInterface $request, ResponseInterface $response, bool $is_authorized, $user_id = null): ResponseInterface
    {
        $response = $this->validateRequest($request, $response);
        if ($response->getStatusCode() !== 200) {
            return $response;
        }

        $params = new AuthorizeParams($this->dataStore, $request);
        $redirectUrl = $params->get('redirect_url');

        if (!$is_authorized) {
            return $this->getRedirectResponseWithError($response, $redirectUrl, static::validationMessages['not_authorized']);
        }

        $handler = null;
        switch ($params->get('response_type')) {
            case AuthorizationCode::RESPONSE_TYPE:
                $handler = new AuthorizationCode($this->dataStore, $this->config);
                break;
        }

        if (!$handler) {
            throw new \Exception(static::validationMessages['invalid_response_type']);
        }

        return $handler->handle($params, $response, $user_id);
    }

    protected function getRedirectResponseWithError(
        ResponseInterface $response,
        string $redirectUrl,
        string $error
    ): ResponseInterface {
        return Server::withRedirect($response, $redirectUrl . '?error=' . urlencode($error));
    }
}
